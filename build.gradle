// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        compile_version = 27
        min_version = 16
        target_version = 25
        support_version = '27.1.1'
        kotlin_version = '1.2.30'
        anko_version = '0.10.1'
        junit_version = '4.12'
        slf4j_version = '1.7.25'
        jsoup_version = '1.10.3'
        constraint_layout_version = '1.1.2'
        glide_version = '4.1.1'
        rxjava_version = '2.1.3'
        rxandroid_version = '2.0.1'
        firebase_version = '15.0.1'
        okhttp_version = '3.10.0'
        gson_version = '2.8.2'
        room_version = '1.1.0'
        json_path_version = '2.4.0'
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'com.google.gms:google-services:3.2.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

allprojects {
    group = 'com.github.AoEiuV020'
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

["api", "local", "baseJar", "IronDB", "refresher", "server"].forEach { name ->
    project(name) {
        apply plugin: 'java-library'
        apply plugin: 'kotlin'
        apply plugin: 'maven'

        dependencies {
            testImplementation "junit:junit:$junit_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
            implementation "org.slf4j:slf4j-api:$slf4j_version"
            testImplementation "org.slf4j:slf4j-simple:$slf4j_version"
        }

        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            javadoc.failOnError false
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }
}

["pager", "reader"].forEach { name ->
    project(name) {
        apply plugin: 'com.android.library'
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-android-extensions'
        apply plugin: 'com.github.dcendents.android-maven'

        android {
            compileSdkVersion compile_version
            defaultConfig {
                minSdkVersion min_version
                targetSdkVersion target_version
                versionCode 1
                versionName "1.0"

                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }


        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task javadoc(type: Javadoc) {
            failOnError  false
            source = android.sourceSets.main.java.sourceFiles
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath += configurations.compile
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
